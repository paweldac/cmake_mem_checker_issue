os: linux
dist: bionic
language: cpp

cache:
  directories:
    - ${HOME}/deps/cmake-3.18.2

jobs:
  include:
    - env: COMPILER=clang++-10 MEMORY_SANITIZER=Valgrind
      addons: {
        apt: {
          sources: [
            {
              sourceline: "deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main",
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
            }
          ],
          packages: ["clang-10", "valgrind"]
        }
      }
    - env: COMPILER=clang++-10 MEMORY_SANITIZER=AddressSanitizer
      addons: {
        apt: {
          sources: [
            {
              sourceline: "deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main",
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
            }
          ],
          packages: ["clang-10"]
        }
      }

git:
  submodules: false

before_install:
  - git submodule update --init --recursive

install:
  # All the dependencies are installed in ${HOME}/deps/
  - DEPS_DIR="${HOME}/deps"
  - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}
  - export PARALLEL_BUILD_JOBS="${PARALLEL_BUILD_JOBS:-$(nproc)}"
  # Set env variables and default build settings
  - if [[ "${COMPILER}" != "" ]]; then export CXX=${COMPILER}; fi
  - ${CXX} --version
  # Prepare prefix root used for dependency installation
  - (mkdir -p ${HOME}/prefix_root/usr/includes && mkdir -p ${HOME}/prefix_root/usr/lib && mkdir -p ${HOME}/prefix_root/usr/share)
  # Set new gcc/clang in PATH
  - mkdir -p ${HOME}/.local/bin
  - |
    if [[ "${CXX%%+*}" == "clang" ]]; then
      ln -s /usr/bin/${COMPILER} ~/.local/bin/clang++
    else
      ln -s /usr/bin/${COMPILER} ~/.local/bin/g++
    fi
  - export PATH=${HOME}/.local/bin:${PATH}
  # Install CMake
  - CMAKE_MAJOR_VERSION=3.18
  - CMAKE_MINOR_VERSION=2
  - CMAKE_VERSION="${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}"
  - |
    if [[ -z "$(ls -A ${DEPS_DIR}/cmake-${CMAKE_VERSION})" ]]; then
      CMAKE_URL="https://cmake.org/files/v${CMAKE_MAJOR_VERSION}/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz"
      mkdir -p cmake-${CMAKE_VERSION} && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake-${CMAKE_VERSION}
    fi
    export PATH=${DEPS_DIR}/cmake-${CMAKE_VERSION}/bin:${PATH}
  - cmake --version

  # Install the right version of clang, libc++ and libc++abi
  - |
    if [[ "${CXX%%+*}" == "clang" ]]; then
      if [[ "${CXX}" == "clang++-6.0" ]]; then LLVM_VERSION="6.0.1";
      elif [[ "${CXX}" == "clang++-7" ]];   then LLVM_VERSION="7.1.0";
      elif [[ "${CXX}" == "clang++-8" ]];   then LLVM_VERSION="8.0.1";
      elif [[ "${CXX}" == "clang++-9" ]];   then LLVM_VERSION="9.0.1";
      elif [[ "${CXX}" == "clang++-10" ]];  then LLVM_VERSION="10.0.0";
      fi
      
      if [[ "${CXX}" == "clang++-6.0" ]]; then
        LLVM_URL="http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
        LIBCXX_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
        LIBCXXABI_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"
      else
        LLVM_URL="https://github.com/llvm/llvm-project/releases/download/llvmorg-${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
        LIBCXX_URL="https://github.com/llvm/llvm-project/releases/download/llvmorg-${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
        LIBCXXABI_URL="https://github.com/llvm/llvm-project/releases/download/llvmorg-${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"
      fi

      if [[ -z "$(ls -A ${DEPS_DIR}/llvm-${LLVM_VERSION})" ]]; then
        mkdir -p llvm-${LLVM_VERSION} llvm-${LLVM_VERSION}/build llvm-${LLVM_VERSION}/projects/libcxx llvm-${LLVM_VERSION}/projects/libcxxabi
        travis_retry wget -O - ${LLVM_URL} | tar --strip-components=1 -xJ -C llvm-${LLVM_VERSION} || exit 1
        travis_retry wget -O - ${LIBCXX_URL} | tar --strip-components=1 -xJ -C llvm-${LLVM_VERSION}/projects/libcxx || exit 1
        travis_retry wget -O - ${LIBCXXABI_URL} | tar --strip-components=1 -xJ -C llvm-${LLVM_VERSION}/projects/libcxxabi || exit 1
        (cd llvm-${LLVM_VERSION}/build && cmake .. -DCMAKE_INSTALL_PREFIX=${DEPS_DIR}/llvm-${LLVM_VERSION}/install) || exit 1
        (cd llvm-${LLVM_VERSION}/build/projects/libcxx && make install -j${PARALLEL_BUILD_JOBS}) || exit 1
        (cd llvm-${LLVM_VERSION}/build/projects/libcxxabi && make install -j${PARALLEL_BUILD_JOBS}) || exit 1
      fi
      export CXXFLAGS="-isystem ${DEPS_DIR}/llvm-${LLVM_VERSION}/install/include/c++/v1"
      export LDFLAGS="-L ${DEPS_DIR}/llvm-${LLVM_VERSION}/install/lib -l c++ -l c++abi"
      export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${DEPS_DIR}/llvm-${LLVM_VERSION}/install/lib"
    fi
  # Install GoogleTest
  - |
    GTEST_GIT_REPO="https://github.com/google/googletest.git"
    GTEST_GIT_HASH="703bd9caab50b139428cea1aaff9974ebee5742e"
    GTEST_DIR="${DEPS_DIR}/googletest/googletest-703bd9c"
    if [[ -z "$(ls -A ${GTEST_DIR})" ]]; then
      mkdir -p ${GTEST_DIR}
      git clone ${GTEST_GIT_REPO} ${GTEST_DIR}
      cd ${GTEST_DIR}
      git reset --hard ${GTEST_GIT_HASH}
    fi
    if [[ "${CXX%%+*}" == "clang" ]]; then
      (mkdir -p ${GTEST_DIR}/build && cd ${GTEST_DIR}/build && cmake .. -DCMAKE_CXX_FLAGS="-std=c++11 -stdlib=libc++ ${CXXFLAGS}" -DCMAKE_INSTALL_PREFIX="${HOME}/prefix_root" && cmake --build . -j${PARALLEL_BUILD_JOBS} --target install)
    else
      (mkdir -p ${GTEST_DIR}/build && cd ${GTEST_DIR}/build && cmake .. -DCMAKE_INSTALL_PREFIX="${HOME}/prefix_root" && cmake --build . -j${PARALLEL_BUILD_JOBS} --target install)
    fi


before_script:
  - cd ${TRAVIS_BUILD_DIR}
  - (mkdir build && cd build && cmake .. -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DCMAKE_INSTALL_PREFIX="${HOME}/prefix_root" -DMEMORY_SANITIZER=${MEMORY_SANITIZER})

script:
  - |
    cd build
    make all -j${PARALLEL_BUILD_JOBS}
    if ! ctest --schedule-random --output-on-failure --parallel ${PARALLEL_BUILD_JOBS} -D ExperimentalMemCheck; then
      find Testing/Temporary -name "MemoryChecker.*.log" -exec cat {} +
      exit 1
    fi
    ls -l Testing/Temporary
